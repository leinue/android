
Android Development
用户界面设计
选项卡TabHost P130
选项卡主要由TabhHost,TabWidget和FrameLayout组成.在声明XML文件时必须为每一个组件指定id.
选项卡的内容也是通过XML控制,比如新建一个tab1.xml即可使用.
在代码中控制TabHost:
TabHost tabhost=(TabHost)findViewById(R.id.tabhost); //获得tabhost
//初始化组件
tabhost.setup();
LayoutInflater inflater=LayoutInflater.from(this);
//动态载入XML
Inflater.inflate(R.layout.tab1,tabHost.getTabContentView());
Inflater.inflate(R.layout.tab2,tabHost.getTabContentView());
//添加一个标签页,先设置tabSpec,然后设置tab名称,最后设置tab内容
tabHost.add(tabHost.newTabSpec(“tab01”)
.setIndicator(“one”)
.setContent(R.id.LinearLayout1));
tabHost.add(tabHost.newTabSpec(“tab02”)
.setIndicator(“two”)
.setContent(R.id.LinearLayout2));
补充,LayoutInflater作用:
1.对于一个没有被载入或者需要动态载入的页面都需要用inflater.
2.对于一个已经载入的activity,可以使用findViewById来寻找界面元素
inflate 方法
public View inflate (int resource, ViewGroup root)?
public View inflate (XmlPullParser parser, ViewGroup root)
public View inflate (XmlPullParser parser, ViewGroup root, boolean attachToRoot) ?
public View inflate (int resource, ViewGroup root, boolean attachToRoot)
TIPS 1 善于使用Adapter与(GridView,ListView,ImageView)等进行关联.同时注意使用ArrayList和HashMap存储数据.
在标题上显示进度条 P141
requestWindowFeature(Window.FEATURE_PROGRESS);//显示水平进度条
再创建继承自AsyncTask的异步类,并重写
onPreExecute() //让进度条可见
doInBackground() //要执行的耗时任务
onProgressUpdate() //动态更新最近进度
onPostExecute() //任务执行后
setProgressVisibility(true); //执行前让进度条可见
SetProgress(_progressNum); //动态更新最新进度
最后需要使用execute执行Task,假如继承之后的类名为myTask,则执行代码为:
New myTask().Execute();
使用Notification P147
1.调用getSystemSerice()取得系统的NotificationManager服务
2.创建一个notification对象,并为其设置各种属性
3.为Notification对象设置事件信息
4.通过NotificationManager类的notify()对象发送Notication通知
获得NotificationManager服务的方法如下:
NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
删除通知:
nm.cancel(id);
nm.cancelAll();
使用AlertDialog P150
一般使用AlertDialog.builder类,它能够实现更多对话框类型.
builder类可以通过new AlertDialog.builder().create()创建
也可以通过new AlertDialog.builder()创建
在使用前者时最后可以直接使用.show()方法显示对话框
在使用后者时需要使用.create().show()显示对话框
当直接使用builder的时候(后者)可以使用setPositiveButton之类的方法,使用Alert(前者)则需要使用setButton()方法设置对话框类型.
使用Bundle在Activity之间交换数据 P175
将要保存的数据放到bundle中,然后通过intent提供的putExtras方法将要懈怠的数据保存到intent中.
发送数据
Intent intent=new Intent(CurrentClass.this,targetClass.class);
Bundle bundle=new Bundle();
bundle.putXXX(key,value);
intent.putExtras(bundle);
startActivity(intent);
接收数据:
Intent intent=getIntent();
Bundle bundle=getExtras();
bundle.getXXX(key);
调用另一个Activity并返回结果(比如,上一步功能) P178
使用startActivityForResult()方法,并设置一个请求码用来鉴定来源.
Fragment P185
用来在Activity中描述一些行为或一部分用户界面,运行时和activity同步.
在布局中添加fragment:
直接使用<fragment></fragment>标签
注意fragment的name属性要用com.packname.NAME注明
在Activity运行时添加fragment:
获取一个fragmentTransaction的实例,然后使用add()方法添加一个fragment,add()方法的第一个参数是fragment要放入的viewGroup(由R.Resource指定).第二个参数是要参加的fragment,为了最后使改变生效还要调用commit()方法提交事务.
//实例化DetailFragment对象
DetailFragment details=new DetailFragment();
FragmentTransaction ft=getFragmentManager().beginTrancation();
Ft.add(android.R.id.content,details).commit();
Android应用核心Intent P200
Intent包含名称,动作,数据,种类,额外和标记等内容.
组件名称(Component Name):
可以使用setComponent(),setClass()或setClassName设置,使用getComponent()读取.
动作(Action):
Action是一个字符串,它用来表示将要执行的动作.在Intent类中,定义了一系列动作常量,气目标组件包括Activity和Broadcast两类.
1.标准Activity动作
a)参考API文档中Intent类的说明
b)使用动作时,需要讲起转换为对应的字符串信息.如ACTION_MAIN应该转换为android.intent.action.MAIN
2.标准广播动作
a) 参考API文档中Intent类的说明
b)使用动作时,需要讲起转换为对应的字符串信息.如ACTION_TIME_TICK应该转换为android.intent.action.TIME_TICK
Intent对象中的动作使用setAction()设置,使用getAction()方法读取.
数据(Data):
Data表示操作数据的URI和MIME类型,不同动作与不同类型的数据规范匹配.例如,如果动作是ACTION_EDIT,那么数据应该是包含用来编辑文档的URI;如果动作是ACTION_CALL,那么数据应该是包含呼叫好吗的tel:URI;如果动作时ACTION_VIEW,那么数据应该是包含网路访问的http:URI.
种类(Category):
参考API文档中Intent类的说明
addCategory()方法将种类增加到Intent类中,removeCategory()方法删除上次增加的种类,getCategories()方法获得当前对象中包含的所有种类.
额外(Extras):
Extras是一组键值时,其中包含了应该传递给处理Intent的组件的额外信息.例如,动作为ACTION_TIMEZONE_CHANGED的Intent用time-zone额外来表示新时区.
标记(Flags):
Flags表示不同来源的标记,多数用语指示Android系统如何启动Activity(如Activity属于哪个Task)以及启动后如何对待(如它是否属于近期的Activity列表).所有的标记都定义在Activity类中.
APPLICATIONS 1:利用Intent返回系统Home桌面
Intent intent=new Intent(); //创建Intent对象
intent.setAction(Intent.ACTION_MAIN); //设置动作
intent.addCategory(Intent.CATEGORY_HOME); //设置种类
startActivity(intent); //将Intent传递给Activity
APPLICATIONS 2:利用Intent拨打电话
Intent intent=new Intent();
intent.setAction(Intent.ACTION_CALL);
intent.setData(Uri.parse(“tel:”+number));
starActivity(intent);
还需要添加拨打电话的权限
<uses-permission android:name=”android.permission.CALL_PHONE”/>
APPLICATIONS 3:利用Intent打开网页
Intent intent=new Intent();
intent.setAction(Intent.ACTION_VIEW);
intent.setData(Uri.parse(“http://baidu.com”));
startActivity(intent);
事件处理概述 P220
处理键盘事件 P221
Android中控件在处理物理按键事件时,提供的回调方法有onKeyUp(),onKeyDown和onKeyLongPress().
Android设备可用物理按键及其触发事件表可参考P221
APPLICATIONS 1:屏蔽后退键/提示音量增加事件
重写onKeyDown()方法来拦截用户单击后退键事件
返回true即可.在此之前要判断onKeyDown方法中的参数keyCode是否为后退键的键值.
但是对于音量增加事件要返回false,因为不是屏蔽掉.
按钮长按事件使用.setOnLongClickListener方法
内部函数使用onLongClick()
资源访问 P233
定义字符串资源文件
<resources>
<string name=”introduce”>hhhh</string>
</resources>
使用字符串资源
R.String.字符串名
getResources().getString(R.String.introduce)
在XML文件中使用字符串资源:@string/字符串名
定义颜色值
在Android中,颜色值通过RGB三原色和一个透明度(Alpha)表示,它必须以#开头,后面接Alpha-Red-Green-Blue形式的内容.其中Alpha可以被省略,如果被省略,表示颜色默认是完全不透明的.通常情况下,颜色值使用以下4种形式之一:
#RGB,#ARGB,#RRGGBB,#AARRGGBB
在表示透明度时,0表示完全透明,F表示完全不透明.
定义颜色资源文件
<resources>
<color name=”introduce”>#FFFFFFF</color>
</resources>
使用颜色资源
R.color.颜色资源名
getResources().getColor(R.color.introduce);
在XML文件中使用颜色资源:@color/颜色资源名
定义尺寸资源文件
<resources>
<dimen name=”introduce”>24px</dimen>
<dimen name=”introduce”>14dp</dimen>
</resources>
使用尺寸资源
R.dimen.尺寸资源名
getResources().getDimension(R.dimen.introduce);
在XML文件中使用尺寸资源:@dimen/尺寸资源名
定义数组资源文件
<resources>
<string-array name=”introduce”>
<item>A</item>
<item>B</item>
</string-array>
</resources>
使用数组资源
R.array.数组名
String[] arr=getResources().getStringArray(R.id.introduce);
在XML文件中使用数组资源:@array/数组名
在定义ListView时通过定义android:entries属性来指定项目列表
使用图片资源
R.drawable.文件名
ImageView iv=(ImageView)findViewById(R.id.imageView1);
iv.setImageResources(R.drawable.文件名);
在XML文件中使用图片资源:@drawable/文件名	
StateListDrawable资源 P245
StateListDrawable资源是定义在XML文件中的drawable对象,能根据状态呈现不同的图像.例如一个button可以有不同的状态(pressed,enabled或focused),使用StateListDrawable资源可以为按钮的每个状态提供不同的按钮图片.
StateListDrawable资源文件的根元素为<seclector></seclector>
在该元素中可以包含多个<item></item>元素,每个item元素可以设置两个属性:
1.Android:color或android:drawable,用于指定颜色或drawable资源
2.android:state_xxx:用于指定一个状态.常用的状态属性表参考P245也的表8.1
例如,创建一个编辑框,若获得焦点则改变其颜色的XML代码如下:
此XML文件名称为edittext_focused.xml
<selector>
<item android:color=”#F60” android:state_focused=”true”/>
<item android:color=”#0A0” android:state_focused=”false”/>
</selector>
要在EditText中使用状态信息可以使用以下代码:
<EditText
android:id=”@+id/edittext”
Android:layout_height=”wrap_content”
Android:layout_width=”wrap_content”
Android:textColor=”@drawable/edittext_focused”
Android:text=”please enter in”/>
使用样式资源
<resoureces>
<style name=”basic”>
<item name=”android:textSize”>48px</item>
<item name=”android:textColor”>#F60</item>
</style>
<style name=”title” parent=”basic”>
<item name=”android:padding”>10px</item>
<item name=”android:gravity”>center</item>
</style>
</resources>
注意parent=”basic”,style资源是可以继承的
使用主题资源 P250
主题资源的设置和style资源一样,不同的是主题资源对整个Activity起作用,而style只对一个View起作用.
原始XML资源 P252
解析XML用XmlResourcesParser
菜单资源 P254
菜单资源放在res\menu目录下.菜单资源的根元素是<menu></menu>,它应包含<item></item>和<group></group>
具体属性参考P254页的两个表格
使用菜单资源
重写onCreateOptionsMenu方法,在该方法中,首先创建一个用于解析菜单资源文件的MenuInflater对象,然后调用该对象的infalte方法解析一个菜单资源,并把据诶诶后的菜单保存在menu中
MenuInflater inflater=new MenuInflater(this);
Infalter.inflate(R.menu.optionmenu,menu);
//menu为onCreateOptionsMenu方法的参数
重写onOptionItemSeclected方法用语当菜单项被选择时作出相应处理
item.getTitle();即可获得被点击的菜单项.
其中item为onOptionItemSeclected方法的参数
上下文菜单:
当用户长时间按键不放时,弹出的菜单就是上下文菜单
1.在Activity中的onCreate()方法注册上下文菜单
registerForContent(tv); //tv是一个被注册的控件
2.重写onCreateContextMenu方法,在该方法中首先创建一个MenuInflater对象,然后调用该对象的inflate方法解析一个菜单资源文件,并把解析后的菜单保存在menu中.
MenuInflater inflater=new MenuInflater(this);
Infalter.inflate(R.menu.optionmenu,menu);
//menu为onCreateContextMenu方法的参数
menu.setHeaderIcon(R.id.ic_launcher);
menu.setHeaderTitle(“title”);
3.重写onContextItemSeclected方法,用语菜单项被选择时做出相应处理
item.getTitle();即可获得被点击的菜单项.
其中item为onOptionItemSeclected方法的参数
TIPS 2 如果想为菜单创建子菜单可以在item中另加一个menu标签,但此时子menu中的item标签要被group包围,具体见P258
Group和item的属性要多看看,尽量记住,挺有用.
国际化Android程序 P260
在res目录下创建对应于各个语言的文件夹
简体中文:values-zh-rCN
繁体中文:values-zh-rTW
美式英文:values-em-rUS
然后在每一个文件夹创建相应的strings.xml,并在该文件中定义对应于言的字符串即可.
高级编程设计
多媒体应用开发 P318
使用MediaPlayer播放音频
创建MediaPlayer对象,并装载音频文件.MediaPlayer的静态方法create()常用的语法格式有两种:
1.create(Context context,int resid);
2.Create(Context context,Uri uri);
如果需要单独指定要装载的资源,这可以使用MediaPlayer类的setDataSource方法实现.但在使用它之后MediaPlayer并未真正装载该音频文件,还需要调用mediaPlayer的prepare方法去真正装载音频文件
MediaPlayer player=new MediaPlayer();
player.setDataSource(“src”);
Player.prepare();
Player.start(); //播放
Player.stop(); //停止
Player.pause(); //暂停
使用SoundPool播放音频
SoundPool即音频池,可以同时播放多个短小的音频,而且占用的资源较少.
1.创建SoundPool对象
SoundPool(int maxStreams,int streamType,int srcQuality);
参数maxSteams指定可以容纳多少音频
参数streamType指定声音类型,可以用AudioManager类的常量指定
参数srcQuality指定声音的品质,默认值为0
SoundPool soundpool=new SoundPool(10,AudioManager.STREAM_SYSTEM,0);
2.加载所要播放的音频
Public int load(Context context,int resId,int priority);
Public int load(String path,int priority);
还有两个详情见书P323
Soundpool.load(this,R.raw.ding,1);
为了更好的管理所加载的音频,一般使用HashMap<Integer,Integer>
HashMap<Integer,Integer>soundmap=new HashMap<Integer,Integer>();
Soundmap.put(1,soundpool.load(this,R.id.raw.ding,1));
3.播放音频
Play(int soundID,float leftVolume,float rightVolume,int priority,int loop,float rate);
参数soundID用于指定要播放的音频,该音频是通过load方法返回的
参数LeftVolume指定左声道音量,取值为0.0-1.0
参数RightVolume指定右声道音量,取值为0.0-1.0
参数priority指定播放音频的优先级,数值越大,优先级越高
参数loop指定循环次数,0为不循环,-1为循环
参数rate用于指定速率,正常为1,最低为0.5,最高为2
使用VideoView播放视频 P326
<VideoView></VideoView>
在布局文件中创建组件,然后在Activity中获取组件.使用setVideoPath()或者setVideoURI()加载要播放的视频,最后调用start()方法播放视频,此外还有stop()和pause()方法用于停止或暂停视频的播放.
其它
音量控制使用getSystemService中的AUDIO_SERVICE
相机使用Camera类
使用ContentProvider实现数据共享 P350
ContentProvider介绍
主要用来实现对数据的增删查改,需要调用getContentResolver方法获得contentProvider对象.
数据模型
每条记录包含一个数值型的_ID字段,用于在表格中唯一标识该记录.
查询会返回一个cursor对象,它能遍历各行各列来读取各个字段的值,对于各个类型的数据,它都提供了专用的方法,因此为了读取字段的数据,开发人员必须知道当前字段的确切数据类型.
URI的用法
所有为provider提供的URI都以”content://”作为前缀.
Android为当前平台提供的ContentProvider定义了CONTENT_URI常量,例如,匹配电话号码到联系人的URI和匹配保存联系人照片的URI分别如下:
1.android.provider.Contacts.Phones.CONTENT_URI
2.Android.provider.Contacts.Photos.CONTENT_URI
CONTENT URI重要部分的总结:
content://B/C/D
B:URI的验证部分,用于表示该content provider,对于第三方应用,该部分应该是完整的类名来保证唯一性.
C:content provider的路径部分,用于决定哪类数据被请求,如果content provider仅提供一种数据类型,可以省略该部分;如果provider提供几种类型,包括子类型,此部分可以由及部分组成.
D:被请求的特定记录的ID值,这是被请求记录的_ID值,如果请求不仅限于单条记录,该部分及前面的斜线应该删掉.
Android提供的content provider:
Browser:读取或修改书签,浏览历史或网络搜索.
CallLog:查看或更新通话历史.
Contacts:读取,修改或保存联系人信息.
LiveFolders:由content provider提供内容的特定文件夹.
MediaStore:访问声音,视频和图片.
Setting:查看和获取蓝牙设置,铃声和其他设备偏好.
SyncStateContact:用语使用数据数组帐号关联数据的conentProvider余数,希望使用标准方式存储provider时可以使用.
UserDictionary:在可预测文本输入时,提供用语定义单词给输入法使用.应用程序和输入法能增加数据到该字典.单词能关联频率信息和本地化信息.
查询数据 P352
要查询contentProvider中的数据,需要以下3个信息:
1.标识该content provider的URI
2.需要查询的数据字段名称
3.字段中数据的类型
如果要查询特定记录,还需要提供该记录的ID值.
使用ContentResolver.query()或Activity.managedQuery()方法查询数据
它们使用相同的参数,都返回cursor
第一个参数为provider的URI,即CONTENT_URI常量.
其它参数参考 P352
增加记录
使用contentResolver.insert()方法并传递给它provider的URI参数和contentValues映射.它返回新纪录的完整URI.
增加新值
见书P353
批量更新记录
ContentResolver.update();
删除记录
删除单条记录:ContentProvider.delete(),传入特定的URI
删除多条记录:ContentProvider.delete(),传入删除记录类型的URI(如android.provider.Contacts.People.CONTENT_URI)和一个SQL WHERE语句.
实例见书P354
线程与消息处理
通过Thread类的构造方法创建线程
Thread(Runnable runnable); //需要通过重写run方法来实现
Thread thread=new Thread(Runnable runnable){
@Override
Public void run(){} //要执行的操作
}
通过实现Runnable接口创建线程
Public class ClassName extends Object implements Runnable
需要实现run()方法
开启线程
Thread.start();
休眠线程
Thread.sleep(1000);
中断线程
Thread.interrupt();
如果中断了线程还需要使用一个标记变量isInterrupted
并且在run方法中加入一个判断
Private boolean isInterrupted=false;
...
Public void run(){
While(isInterrupted){...}
}
Handler消息传递机制 P371
主要用来实现在新创建的线程中操作UI界面
循环者(LOOPER)简介:
在Android中,一个线程对应一个Looper对象,而一个Looper对象又对应一个MessageQueue,它用来存放message,存放的消息按照先进先出原则执行.
不能使用构造方法创建Handler对象,正确的步骤如下:
1.使用Looper类的prepare()方法初始化一个looper对象
2.创建该handler对象
3.使用looper类的loop方法启动looper,从消息队列中获取和处理消息
Public class LooperThread extends Thread{
Public Handler handler1; //声明一个handler对象
@Override
Public void run(){
Super.run;
Looper.prepare();  //初始化looper对象
Handler1=new handler(){
Public void handleMessage(Message msg){
Log.i(“looper”,String.valueOf(msg.what));
}
};
Message m=handler1.obtainMessage(); //获取一个消息
m.what=0x11; //设置message的what属性
Handler1.sendMessage(m); //发送消息
Looper.loop();
}
}
接下来在onCreate方法中创建一个LooperThread线程并启动
LooperThread lh=new LooperThread();
lh.start();
Looper类提供的常用方法有:
Prepare(),loop(),myLooper(),getThread(),quit();
消息处理类(Handler)简介 P373
1.将Message或runnable应用post或sendMessage方法发送到messageQueue中,在发送时可以指定延迟时间,发送时间以及要携带的bundle数据.当MessageQueue循环到该Message时调用相应的Handler对象的handlerMessage方法对其进行处理.
2.在工作线程中与UI线程通信.
在一个线程中只能有一个Looper和MessageQueue,但是可以有多个Handler,而且这些Hnadler可以共享同一个Looper和MessageQueue
Handler类提供的常用方法详情看书P373
消息类(Message)简介
每个Message对象可以通过.obtain或Handler.obtainMessage获得.一个Message对象有5个属性:
1.arg1 int 存放整型数据
2.arg2 int 存放整型数据
3.obj Object 存放发送给接收器的Object类型的任意对象
4.replyTo Messager 指定此Message发送到何处的可选messager
5.what int 指定用户自定义的消息代码
使用Message类的属性可以携带int类型数据,如果要携带其他类型数据,可以用bundle对象,然后通过Message类的setData方法添加到Message中.
Service应用 P384
Service的分类
可分为Started服务和Bound服务
Started服务是由其它组件调用StartService启动的,这会调用onStartCommand方法.
Bound服务是允许其它应用程序绑定并且与之交互的service类的实现类.为了提供绑定,必须实现onBind方法,该方法返回IBinder对象,定义了客户端用来与服务交互的程序接口.
实现Started服务 P388
1.继承IntentService类
使用IntentService类是非常好的选择.
实现onHandleIntent(Intent intent)方法和没有参数的构造方法
当然还可以重写onCreate(),onStartCommand()和onDestory()
2.继承Service类
很复杂,见书P389
可以从Activity或者其它应用程序组件通过传递Intent对象到startService方法启动服务,不能直接调用onStartCommand方法.
Intent intent=new Intent(this,HelloService.class);
startService(intent);
停止服务必须使用stopSelf()停止自身,或者其它应用程序组件调用stopService()方法停止服务.Android系统不会停止或销毁服务.
为确保精确,可以为stopSelf加一个int参数,启动请求的ID.
实现Bound Service
1.继承Binder类
如果服务仅用于本地应用程序并且不需要跨进程工作,则开发人员可以实现自己的Binder类来为客户端提供访问服务公共方法的方式.这仅当客户端与服务位于同一个应用程序和进程时才有效.例如,音乐播放器需要绑定Activity在后台播放音乐.
具体实现方法见书P397
2.使用Messager类
如果需要服务与远程进程通信,则可以使用Messager类来为服务提供接口.具体实现见书P399.
Binder类和Messager类的Activity事件中都要重写onStart()和onStop()方法且用到serviceConnection.但是Messager要使用handler.
网络编程及Internet应用 P414
使用HttpURLConnection访问网络
该类是抽象类,不能直接实例化对象,需要用URL.openConnection方法创建.
URL url=new URL(“http://baidu.com”);
HttpURLConnection urlConnection=(HttpURLConnection)url.openConnection();
但是这样还不能发送HTTP请求,仍需要进一步设置
1.发送GET请求
urlConnection.getInputStream();
在应用GET方法传递中文参数时会产生乱码,这时可以用BASE64编码或者JAVA提供的URLEncoder类解决.
2.发送POST请求
urlConnection.setRequestMethod(“POST”);
发送POST请求要麻烦一些,需要设置很多东西,详情见书P418
使用HttpClient访问网络
HttpURLConnection中的输入/输出流被统一封装成了HttpPost,HttpGet,HttpResponse
1.发送GET请求
a)创建HttpClient对象.
b)创建HttpGet对象.
c)调用HttpGet.setParams来设置参数或者直接把参数写进URL中.
d)调用HttpClient对象的execute方法发送请求,执行该方法将返回一个HttpResponse对象.
e)调用HttpResponse的getEntity()方法,可获得包含服务器响应内容的HttpEntity对象.
Stringtarget=”http://baidu.com”;
HttpClient httpclient=new DefaultHttpClient(target);
HttpGet httprequest=new HttpGet(target);
HttpResponse httpresponse;
Httpresponse=httpclient.execute(httprequest);
If(httpresponse.getStatusLine().getStatusCode()==HttpStatus.SC_OK){
Result=EntityUtils.toSting(httpresponse.getEntity());
}else{ //失败}
2.发送POST请求
a)创建HttpClient对象.
b)创建HttpPost对象.
c)使用HttpPost.setParams()方法添加请求参数或者调用setEntity方法设置请求参数(使用ArrayList设置请求参数).
d)调用HttpClient对象的execute方法发送请求,返回HttpResponse对象.
e)调用HttpResponse对象的getEntity方法,可以获得服务器相应内容.
Stringtarget=”http://baidu.com”;
HttpClient httpclient=new DefaultHttpClient(target);
HttpPost httprequest=new HttpPost(target);
List<NameValuePair> params=new ArrayList<NameValuePair>();
Params.add(new BasicNameValuePair(“param”,”post”));
Params.add(new BasicNameValuePair(“fuck”,”shit”));
httprequest.setEntity(new UrlEncodedFormEntity(params),”utf-8”);
HttpResponse httpresponse;
Httpresponse=httpclient.execute(httprequest);
If(httpresponse.getStatusLine().getStatusCode()==HttpStatus.SC_OK){
Result=EntityUtils.toSting(httpresponse.getEntity());
}else{ //失败}
使用WebView P436
使用标签<WebView>......</WebView>
WebView常用方法参考P436
如果想让WebView组件拥有方法或缩小网页的功能,可以使用:
webview.getSettings().setSupportZoon(true);
webview.getSettings().setBuiltInZoomControls(true);
使用WebView加载HTML代码
使用loadData()或loadDataWithBaseURL(),前者在使用带有中文的HTML代码时会产生乱码,后者不会.
loadDataWithBaseURL(
String baseUrl,String data,
String mimeType,String encoding,
String historyUrl);
参数baseUrl,指定当前页使用的基本URL,如果为空白页则为null
参数data,指定要显示的字符串数据
参数mimeType,指定要显示内容的MIME类型,如果为null,则默认使用text/html
参数encoding,指定数据编码方式
参数historyUrl,指定当前页的历史URL,如果为null则使用about:blank
TIPS 3 在构造长字符串时可以使用StringBuilder类,随后使用append方法.
让WebView支持Javascript
webview.getSetting().setJavaScriptEnabled(true);
//使用这个方法后window.alert不可用,因此还要加一句
webview.setWebChromeClient(new WebChromeClient);
禁止使用内置浏览器访问网页
webview.setWebViewClient(new WebViewClient());
其它
.goForWard(); //前进
.goBack(); //后退
